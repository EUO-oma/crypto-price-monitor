-- messages 테이블 생성 또는 수정

-- 1. 테이블이 없으면 생성
CREATE TABLE IF NOT EXISTS messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    ip_hash VARCHAR(64)
);

-- 2. 테이블이 이미 있고 content 컬럼만 있다면 message 컬럼 추가
DO $$
BEGIN
    -- content 컬럼이 있고 message 컬럼이 없는 경우
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'messages' AND column_name = 'content'
    ) AND NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'messages' AND column_name = 'message'
    ) THEN
        -- content를 message로 복사
        ALTER TABLE messages ADD COLUMN message TEXT;
        UPDATE messages SET message = content;
        ALTER TABLE messages ALTER COLUMN message SET NOT NULL;
    END IF;
END $$;

-- 3. 필요한 컬럼이 없으면 추가
ALTER TABLE messages ADD COLUMN IF NOT EXISTS created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();
ALTER TABLE messages ADD COLUMN IF NOT EXISTS ip_hash VARCHAR(64);

-- 4. 인덱스 생성
CREATE INDEX IF NOT EXISTS idx_messages_created_at ON messages(created_at DESC);

-- 5. RLS 활성화
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- 6. 기존 정책 모두 삭제
DROP POLICY IF EXISTS "Enable read access for all users" ON messages;
DROP POLICY IF EXISTS "Enable insert for all users" ON messages;
DROP POLICY IF EXISTS "Enable insert for anonymous users" ON messages;
DROP POLICY IF EXISTS "Anyone can read messages" ON messages;
DROP POLICY IF EXISTS "Anyone can insert messages" ON messages;

-- 7. 새로운 정책 생성
CREATE POLICY "Anyone can read messages" ON messages
    FOR SELECT 
    USING (true);

CREATE POLICY "Anyone can insert messages" ON messages
    FOR INSERT 
    WITH CHECK (true);  -- 일단 길이 제한 없이 허용

-- 8. 최대 100개 메시지만 유지하는 함수
CREATE OR REPLACE FUNCTION limit_messages()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM messages
    WHERE id IN (
        SELECT id FROM messages
        ORDER BY created_at DESC
        OFFSET 100
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 9. 트리거 생성
DROP TRIGGER IF EXISTS limit_messages_trigger ON messages;
CREATE TRIGGER limit_messages_trigger
    AFTER INSERT ON messages
    FOR EACH STATEMENT
    EXECUTE FUNCTION limit_messages();

-- 10. 테스트 메시지 삽입
INSERT INTO messages (message) VALUES ('채팅 기능이 정상 작동합니다! 🎉');

-- 11. 확인
SELECT * FROM messages ORDER BY created_at DESC LIMIT 5;